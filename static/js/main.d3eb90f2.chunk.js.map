{"version":3,"sources":["components/Loader.jsx","utilities/connectBackgroundTransition.js","App.js","serviceWorker.js","index.js"],"names":["Loader","override","css","color","size","margin","connectBackgroundTransitionGroup","main_BG","CSSRulePlugin","getRule","TweenLite","to","cssRule","opacity","scale","rotate","filter","App","useState","displayName","setDisplayName","roomName","setRoomName","onCall","setOnCall","useEffect","className","loadingComponent","onAPILoad","JitsiMeetAPI","console","log","config","prejoinPageEnabled","disableDeepLinking","style","height","type","placeholder","value","onChange","e","target","onClick","Boolean","window","location","hostname","match","gsap","registerPlugin","CSSPlugin","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kfAGA,IAYeA,EAZA,WACb,IAAMC,EAAWC,YAAH,KAOd,OACE,kBAAC,IAAD,CAAYC,MAAO,YAAaC,KAAM,GAAIC,OAAQ,EAAGH,IAAKD,K,uBCVjDK,EAEA,WACT,IAAMC,EAAUC,IAAcC,QAAQ,0BACtCC,IAAUC,GAAGJ,EAAS,IAAK,CAACK,QAAQ,CAACC,QAAS,EAAGC,MAAO,IAAKC,OAAQ,EAAGC,OAAQ,iBAJvEV,EAMG,WACZ,IAAMC,EAAUC,IAAcC,QAAQ,0BACtCC,IAAUC,GAAGJ,EAAS,IAAK,CAACK,QAAQ,CAACC,QAAS,GAAKC,MAAO,IAAKC,QAAS,EAAGC,OAAQ,gBCkDxEC,EAlDH,WAAO,IAAD,EAEsBC,mBAAS,IAF/B,mBAETC,EAFS,KAEIC,EAFJ,OAGgBF,mBAAS,IAHzB,mBAGTG,EAHS,KAGCC,EAHD,OAIYJ,oBAAS,GAJrB,mBAITK,EAJS,KAIDC,EAJC,KAehB,OATAC,qBAAU,YACM,IAAXF,EACDjB,KAEiB,IAAXiB,GACNjB,MAEF,CAACiB,IAGD,yBAAKG,UAAU,kCACb,yBAAKA,UAAWH,EAAO,WAAW,YAChC,yBAAKG,UAAU,OACb,yBAAKA,UAAU,WAAf,4CACA,wBAAIA,UAAWH,EAAO,YAAY,mBAChC,yBAAKG,UAAU,mBACXH,EACA,kBAAC,IAAD,CACEF,SAAUA,EACVF,YAAaA,EACbQ,iBAAkB3B,EAClB4B,UAAW,SAAAC,GAAY,OAAIC,QAAQC,IAAI,yBAA0BF,IACjEG,OAAQ,CAACC,oBAAoB,EAAOC,oBAAoB,KAG5D,yBAAKR,UAAU,UAAUS,MAAO,CAACC,OAAQ,UACvC,uBAAGV,UAAU,WAAb,2BACA,2BAAOA,UAAU,WAAWW,KAAK,OAAOC,YAAY,YAAYC,MAAOlB,EAAUmB,SAAU,SAAAC,GAAC,OAAInB,EAAYmB,EAAEC,OAAOH,UACrH,2BAAOb,UAAU,WAAWW,KAAK,OAAOC,YAAY,YAAYC,MAAOpB,EAAaqB,SAAU,SAAAC,GAAC,OAAIrB,EAAeqB,EAAEC,OAAOH,UAC3H,4BAAQb,UAAU,YAAYiB,QAAS,kBAAMnB,GAAU,KACrD,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,QAAhB,eAKjC,wBAAIA,UAAWH,EAAO,YAAY,mBAClC,yBAAKoB,QAAS,kBAAInB,GAAU,IAC1BE,UAAU,4BADZ,+BAEGH,EAAO,0BAAMG,UAAU,eAAhB,qBAA0D,QC1C1DkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CCNNC,IAAKC,eAAeC,IAAW3C,KAE/B4C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.d3eb90f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { css } from '@emotion/react';\r\nimport GridLoader from \"react-spinners/GridLoader\";\r\nconst Loader = () => {\r\n  const override = css`\r\n  margin: auto;\r\n  -webkit-box-reflect: below 40px linear-gradient(\r\n    to bottom,\r\n    transparent,\r\n    rgba(255, 255, 255, 0.4));\r\n  `;\r\n  return (\r\n    <GridLoader color={'#ffffff80'} size={55} margin={5} css={override}/>\r\n  );\r\n}\r\nexport default Loader;\r\n","import { CSSRulePlugin, TweenLite } from \"gsap/all\";\r\n\r\nexport const connectBackgroundTransitionGroup = {\r\n\r\n  onConnect: () => {\r\n    const main_BG = CSSRulePlugin.getRule(\".main-container:before\");\r\n    TweenLite.to(main_BG, 2.6, {cssRule:{opacity: 1, scale: 1.9, rotate: 8, filter: \"blur(12px)\"}});\r\n  },\r\n  onDisconnect: () => {\r\n    const main_BG = CSSRulePlugin.getRule(\".main-container:before\");\r\n    TweenLite.to(main_BG, 2.6, {cssRule:{opacity: 0.6, scale: 1.1, rotate: -8, filter: \"blur(0px)\"}});\r\n  }\r\n\r\n};\r\n","import React, { useEffect, useState } from 'react';\n\nimport './SASS/main.scss';\n\nimport Loader from './components/Loader';\n\nimport Jitsi from 'react-jitsi';\n\nimport { connectBackgroundTransitionGroup } from './utilities/connectBackgroundTransition';\n\nconst App = () => {\n\n  const [displayName, setDisplayName] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [onCall, setOnCall] = useState(false);\n\n  useEffect(()=> {\n    if(onCall === true) {\n      connectBackgroundTransitionGroup.onConnect();\n    }\n    else if(onCall === false) {\n      connectBackgroundTransitionGroup.onDisconnect();\n    }\n  },[onCall])\n  \n  return (\n    <div className=\"container-fluid main-container\">\n      <div className={onCall?\"row my-1\":\"row my-5\"}>\n        <div className=\"col\">\n          <div className=\"my-wrap\">&#8943;&#8886;Hey there family&#8887;&#8943;</div>\n          <hr className={onCall?\"my-1 myHR\":\"mt-5 mb-4 myHR\"}></hr>\n            <div className=\"jisti-container\">\n              { onCall ?\n                <Jitsi\n                  roomName={roomName}\n                  displayName={displayName}\n                  loadingComponent={Loader}\n                  onAPILoad={JitsiMeetAPI => console.log('Good Morning everyone!', JitsiMeetAPI)}\n                  config={{prejoinPageEnabled: false, disableDeepLinking: true}}\n                />\n              :\n              <div className=\"my-wrap\" style={{height: '320px'}}>\n                <p className=\"my-ptag\">Create / Join a Meeting</p>\n                <input className=\"my-input\" type='text' placeholder='Room name' value={roomName} onChange={e => setRoomName(e.target.value)}/>\n                <input className=\"my-input\" type='text' placeholder='Your name' value={displayName} onChange={e => setDisplayName(e.target.value)}/>\n                <button className=\"my-button\" onClick={() => setOnCall(true)}>\n                  <div className=\"connect\"><span className=\"px-4\">CONNECT</span></div>\n                </button>\n              </div>\n              }\n            </div>\n          <hr className={onCall?\"my-1 myHR\":\"mt-4 mb-5 myHR\"}></hr>\n          <div onClick={()=>setOnCall(false)}\n            className=\"my-wrap p-1 pb-2 my-name\">2021 michael cote &infin;&nbsp;\n            {onCall?<span className=\"goBack ml-5\">GO BACK&nbsp;&#8676;</span>:''}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\nimport { gsap, CSSPlugin, CSSRulePlugin} from \"gsap/all\";\ngsap.registerPlugin(CSSPlugin, CSSRulePlugin);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}