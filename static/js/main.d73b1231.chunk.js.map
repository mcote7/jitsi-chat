{"version":3,"sources":["utilities/connectBackgroundTransition.js","components/Loader.jsx","App.js","serviceWorker.js","index.js"],"names":["connectBackgroundTransitionGroup","main_BG","CSSRulePlugin","getRule","TweenLite","to","cssRule","opacity","scale","rotate","filter","Loader","override","css","color","size","margin","App","useState","displayName","setDisplayName","roomName","setRoomName","onCall","setOnCall","chat","messages","setMessages","useEffect","className","onClick","loadingComponent","onAPILoad","JitsiMeetAPI","console","log","config","prejoinPageEnabled","disableDeepLinking","transcribingEnabled","interfaceConfig","APP_NAME","SHOW_PROMOTIONAL_CLOSE_PAGE","SHOW_JITSI_WATERMARK","SHOW_BRAND_WATERMARK","DISABLE_TRANSCRIPTION_SUBTITLES","LANG_DETECTION","TOOLBAR_BUTTONS","TOOLBAR_ALWAYS_VISIBLE","type","placeholder","value","onChange","e","target","aria-hidden","map","m","i","key","autoFocus","onKeyPress","persist","newMessage","sendMessage","Boolean","window","location","hostname","match","gsap","registerPlugin","CSSPlugin","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d73b1231.chunk.js","sourcesContent":["import { CSSRulePlugin, TweenLite } from \"gsap/all\";\r\n\r\nexport const connectBackgroundTransitionGroup = {\r\n\r\n  onConnect: () => {\r\n    const main_BG = CSSRulePlugin.getRule(\".main-container:before\");\r\n    TweenLite.to(main_BG, 2.6, {cssRule:{opacity: 1, scale: 1.9, rotate: 8, filter: \"blur(12px)\"}});\r\n  },\r\n  onDisconnect: () => {\r\n    const main_BG = CSSRulePlugin.getRule(\".main-container:before\");\r\n    TweenLite.to(main_BG, 2.6, {cssRule:{opacity: 0.6, scale: 1.1, rotate: -8, filter: \"blur(0px)\"}});\r\n  }\r\n\r\n};\r\n","import React from 'react';\r\nimport { css } from '@emotion/react';\r\nimport GridLoader from \"react-spinners/GridLoader\";\r\n\r\nconst Loader = () => {\r\n  const override = css`\r\n  margin: auto;\r\n  -webkit-box-reflect: below 40px linear-gradient(\r\n    to bottom,\r\n    transparent,\r\n    rgba(255, 255, 255, 0.4));\r\n  `;\r\n  return (\r\n    <GridLoader color={'#ffffff80'} size={55} margin={5} css={override}/>\r\n  );\r\n}\r\nexport default Loader;\r\n\r\n","import React, { useEffect, useState } from 'react';\n\nimport './SASS/main.scss';\n\nimport { connectBackgroundTransitionGroup } from './utilities/connectBackgroundTransition';\n\nimport Loader from './components/Loader';\nimport Jitsi from 'react-jitsi';\n\n\nconst App = () => {\n\n  const [displayName, setDisplayName] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [onCall, setOnCall] = useState(false);\n\n  const [chat, setChat] = useState(false);\n  const [messages, setMessages] = useState([]);\n\n  const sendMessage = (e) => {\n    e.persist();\n    console.log(\"e?:::\",e)\n    if(e.key === 'Enter' && e.target.value !== \"\") {\n      let newMessage = e.target.value;\n      console.log(\"input?\", newMessage)\n      setMessages([...messages, newMessage]);\n      e.target.value = \"\";\n      console.log(\"messages\", messages)\n    } else {\n      return;\n    }\n  };\n\n  useEffect(()=> {\n    if(onCall === true) {\n      connectBackgroundTransitionGroup.onConnect();\n    }\n    else if(onCall === false) {\n      connectBackgroundTransitionGroup.onDisconnect();\n    }\n  },[onCall])\n  \n  return (\n    <div className=\"container-fluid main-container\">\n      \n      <div className=\"row\">\n        <div className=\"col\">\n          \n          <div className=\"header\">\n            <div \n              className=\"go-back\" \n              onClick={()=>setOnCall(false)}>\n              m cote &infin;&nbsp;\n              {onCall?<span><button className=\"badge badge-secondary\">GO BACK&nbsp;&larr;</button></span>:''}\n            </div>\n            {/* <span \n              onClick={()=>setChat(!chat)}\n              role=\"img\" \n              className=\"ml-3\"\n              title=\"test-chat ðŸš§ðŸš§ðŸš§\"\n              aria-label=\"fu\">ðŸ§ª</span> */}\n          </div>\n          \n          <div className=\"jitsi-container\">\n            { onCall ?\n              <Jitsi\n                roomName={roomName}\n                displayName={displayName}\n                loadingComponent={Loader}\n                \n                onAPILoad={JitsiMeetAPI => console.log('Good Morning everyone!', JitsiMeetAPI)}\n                \n                config={{\n                  prejoinPageEnabled: false,\n                  disableDeepLinking: true,\n                  transcribingEnabled: true\n                }}\n                \n                interfaceConfig={{\n                  APP_NAME: 'Cotes Chat',\n                  SHOW_PROMOTIONAL_CLOSE_PAGE: false,\n                  SHOW_JITSI_WATERMARK: false,\n                  SHOW_BRAND_WATERMARK: false,\n                  DISABLE_TRANSCRIPTION_SUBTITLES: false,\n                  LANG_DETECTION: true,\n                  TOOLBAR_BUTTONS: ['microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen',\n                  'fodeviceselection', 'hangup', 'profile', 'info', 'chat', 'recording',\n                  'livestreaming', 'etherpad', 'sharedvideo', 'settings', 'raisehand',\n                  'videoquality', 'filmstrip', 'invite', 'feedback', 'stats', 'shortcuts',\n                  'tileview', 'videobackgroundblur', 'download', 'help', 'mute-everyone'],\n                  TOOLBAR_ALWAYS_VISIBLE: true\n                }}\n              />\n            :\n            <div className=\"call-form p-4\">\n              \n              <p>Create / Join a Room</p>\n              \n              <input \n                type='text' \n                className=\"form-control mb-3\" \n                placeholder='Room name' \n                value={roomName} \n                onChange={e => setRoomName(e.target.value)}/>\n                \n              <input \n                type='text' \n                className=\"form-control mb-3\" \n                placeholder='Your name' \n                value={displayName} \n                onChange={e => setDisplayName(e.target.value)}/>\n              \n              <button \n                className=\"btn btn-secondary\" \n                onClick={() => setOnCall(true)}>\n                CONNECT&nbsp;\n                <span><i className=\"fa fa-phone\" aria-hidden=\"true\"></i></span>\n              </button>\n            </div>\n            }\n          </div>\n        </div>\n      </div>\n      {chat ? \n        <div className=\"chat\">\n          <p>test chat</p>\n          <div className=\"messages-wrap mt-auto\">\n            {messages.map((m, i) => {\n              return(\n                <div className=\"message-x\">\n                  <div className=\"title-name\">\n                    <div className=\"user\"></div>\n                    <span>Michael Cote</span>\n                    <small>12:00 AM</small>\n                  </div>\n                  <p \n                    className=\"chat-bubble\"\n                    key={i}>\n                    <div className=\"content\">{m}</div>\n                  </p>\n                </div>\n              ); \n            })}\n          </div>\n          <input \n            autoFocus={true}\n            onKeyPress={(e)=> sendMessage(e)}\n            className=\"message-input form-control mt-5\"\n            type=\"text\"/>\n        </div>\n      :\"\"}\n    </div>\n  );\n};\nexport default App;\n// ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\nimport { gsap, CSSPlugin, CSSRulePlugin} from \"gsap/all\";\ngsap.registerPlugin(CSSPlugin, CSSRulePlugin);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}